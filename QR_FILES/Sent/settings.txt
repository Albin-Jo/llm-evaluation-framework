# File: app/core/config/settings.py
import os
from typing import List, Optional, Any
from pydantic import field_validator, model_validator
from pydantic_settings import BaseSettings, SettingsConfigDict


class Settings(BaseSettings):
    """Application settings."""

    # App settings
    APP_NAME: str = "LLM Evaluation Framework"
    APP_DESCRIPTION: str = "A framework for evaluating LLM-based applications"
    APP_VERSION: str = "0.1.0"
    APP_ENV: str = os.getenv("APP_ENV", "development")
    APP_DEBUG: bool = APP_ENV != "production"
    APP_SECRET_KEY: str = os.getenv("APP_SECRET_KEY", "change_this_to_a_secure_random_value")
    APP_BASE_URL: str = os.getenv("APP_BASE_URL", "http://localhost:8000")

    # CORS settings
    CORS_ORIGINS: List[str] = ["*"]

    # Database settings - use default values for testing
    DB_HOST: str = os.getenv("DB_HOST", "localhost")
    DB_PORT: str = os.getenv("DB_PORT", "5432")
    DB_USER: str = os.getenv("DB_USER", "postgres")
    DB_PASSWORD: str = os.getenv("DB_PASSWORD", "postgres")
    DB_NAME: str = os.getenv("DB_NAME", "llm_evaluation")
    DB_URI: Optional[str] = None

    # Storage settings
    STORAGE_TYPE: str = os.getenv("STORAGE_TYPE", "local")
    STORAGE_LOCAL_PATH: str = os.getenv("STORAGE_LOCAL_PATH", "storage")
    STORAGE_S3_BUCKET: str = os.getenv("STORAGE_S3_BUCKET", "")
    AWS_ACCESS_KEY_ID: str = os.getenv("AWS_ACCESS_KEY_ID", "")
    AWS_SECRET_ACCESS_KEY: str = os.getenv("AWS_SECRET_ACCESS_KEY", "")
    AWS_REGION: str = os.getenv("AWS_REGION", "us-east-1")

    # Celery settings
    CELERY_BROKER_URL: str = os.getenv("CELERY_BROKER_URL", "redis://localhost:6379/0")
    CELERY_RESULT_BACKEND: str = os.getenv("CELERY_RESULT_BACKEND", "redis://localhost:6379/0")

    # OpenAI settings
    OPENAI_API_KEY: str = os.getenv("OPENAI_API_KEY", "sk-dummy-key")

    # OIDC settings
    OIDC_DISCOVERY_URL: str = os.getenv("OIDC_DISCOVERY_URL",
                                        "https://example.auth0.com/.well-known/openid-configuration")
    OIDC_CLIENT_ID: str = os.getenv("OIDC_CLIENT_ID", "your_client_id")
    OIDC_CLIENT_SECRET: str = os.getenv("OIDC_CLIENT_SECRET", "your_client_secret")

    # Redis settings
    REDIS_HOST: str = os.getenv("REDIS_HOST", "redis")
    REDIS_PORT: str = os.getenv("REDIS_PORT", "6379")

    # Experiment tracking
    TRACKING_BACKEND: str = os.getenv("TRACKING_BACKEND", "mlflow")
    MLFLOW_TRACKING_URI: str = os.getenv("MLFLOW_TRACKING_URI", "http://localhost:5000")

    # Additional model config
    model_config = SettingsConfigDict(
        env_file=".env",
        env_file_encoding="utf-8",
        extra="ignore"  # This setting allows extra fields
    )

    @model_validator(mode='after')
    def assemble_db_uri(self) -> 'Settings':
        """Assemble database URI from components if not provided directly."""
        if self.DB_URI is None:
            # For testing, use SQLite
            if self.APP_ENV == "testing":
                self.DB_URI = "sqlite+aiosqlite:///:memory:"
            else:
                # Use PostgreSQL for other environments
                self.DB_URI = (
                    f"postgresql+asyncpg://{self.DB_USER}:{self.DB_PASSWORD}"
                    f"@{self.DB_HOST}:{self.DB_PORT}/{self.DB_NAME}"
                )
        return self


# Global settings instance
settings = Settings()