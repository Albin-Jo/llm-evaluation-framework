{
  "openapi": "3.1.0",
  "info": {
    "title": "Microservice Pixi LLM Evaluation",
    "description": "A framework for evaluating LLM-based micro-agents using RAGAS and DeepEval",
    "version": "0.1.0",
    "x-logo": {
      "url": "https://fastapi.tiangolo.com/img/logo-margin/logo-teal.png"
    }
  },
  "paths": {

    "/api/agents/": {
      "post": {
        "tags": [
          "Agents"
        ],
        "summary": "Create Agent",
        "description": "Create a new Agent. Admin only.\n\nArgs:\n    agent_data: The agent data to create\n    db: Database session\n\nReturns:\n    The created agent\n\nRaises:\n    HTTPException: If validation fails",
        "operationId": "create_agent_api_agents__post",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgentCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Agents"
        ],
        "summary": "List Agents",
        "description": "List Agents with optional filtering and pagination.\n\nArgs:\n    skip: Number of records to skip\n    limit: Maximum number of records to return\n    domain: Optional domain filter\n    is_active: Optional active status filter\n    name: Optional name filter (partial match)\n    integration_type: Optional integration type filter\n    db: Database session\n\nReturns:\n    Dict containing list of agents and pagination info",
        "operationId": "list_agents_api_agents__get",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "title": "Skip"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "title": "Limit"
            }
          },
          {
            "name": "domain",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter agents by domain",
              "title": "Domain"
            },
            "description": "Filter agents by domain"
          },
          {
            "name": "is_active",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter agents by active status",
              "title": "Is Active"
            },
            "description": "Filter agents by active status"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter agents by name (partial match)",
              "title": "Name"
            },
            "description": "Filter agents by name (partial match)"
          },
          {
            "name": "integration_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/IntegrationType"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter agents by integration type",
              "title": "Integration Type"
            },
            "description": "Filter agents by integration type"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response List Agents Api Agents  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/agents/{agent_id}": {
      "get": {
        "tags": [
          "Agents"
        ],
        "summary": "Get Agent",
        "description": "Get Agent by ID.\n\nArgs:\n    agent_id: The ID of the agent to retrieve\n    db: Database session\n\nReturns:\n    The requested agent\n\nRaises:\n    HTTPException: If agent not found",
        "operationId": "get_agent_api_agents__agent_id__get",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Agent Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Agents"
        ],
        "summary": "Update Agent",
        "description": "Update Agent by ID. Admin only.\n\nArgs:\n    agent_id: The ID of the agent to update\n    agent_data: The updated agent data\n    db: Database session\n\nReturns:\n    The updated agent\n\nRaises:\n    HTTPException: If agent not found or validation fails",
        "operationId": "update_agent_api_agents__agent_id__put",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Agent Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgentUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Agents"
        ],
        "summary": "Delete Agent",
        "description": "Delete Agent by ID. Admin only.\n\nArgs:\n    agent_id: The ID of the agent to delete\n    db: Database session\n\nRaises:\n    HTTPException: If agent not found or deletion fails",
        "operationId": "delete_agent_api_agents__agent_id__delete",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Agent Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/agents/{agent_id}/test": {
      "post": {
        "tags": [
          "Agents"
        ],
        "summary": "Test Agent",
        "description": "Test an Agent with sample input.\n\nArgs:\n    agent_id: The ID of the agent to test\n    test_input: The input data to test with\n    db: Database session\n\nReturns:\n    The response from the agent\n\nRaises:\n    HTTPException: If agent not found, is inactive, or the test fails",
        "operationId": "test_agent_api_agents__agent_id__test_post",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Agent Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Test Input"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Test Agent Api Agents  Agent Id  Test Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/agents/{agent_id}/test-mcp": {
      "post": {
        "tags": [
          "Agents"
        ],
        "summary": "Test Mcp Agent",
        "description": "Test an MCP agent with a simple message.\n\nArgs:\n    agent_id: The ID of the agent to test\n    test_message: Message to test with\n    db: Database session\n\nReturns:\n    The response from the agent\n\nRaises:\n    HTTPException: If agent not found, is inactive, or the test fails",
        "operationId": "test_mcp_agent_api_agents__agent_id__test_mcp_post",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Agent Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_test_mcp_agent_api_agents__agent_id__test_mcp_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Test Mcp Agent Api Agents  Agent Id  Test Mcp Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/agents/{agent_id}/tools": {
      "get": {
        "tags": [
          "Agents"
        ],
        "summary": "List Agent Tools",
        "description": "List available tools for an MCP agent.\n\nArgs:\n    agent_id: The ID of the agent\n    db: Database session\n\nReturns:\n    List of available tools\n\nRaises:\n    HTTPException: If agent not found, is inactive, or is not an MCP agent",
        "operationId": "list_agent_tools_api_agents__agent_id__tools_get",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Agent Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": true
                  },
                  "title": "Response List Agent Tools Api Agents  Agent Id  Tools Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/agents/{agent_id}/health": {
      "post": {
        "tags": [
          "Agents"
        ],
        "summary": "Check Agent Health",
        "description": "Check if an agent is healthy and available.\n\nArgs:\n    agent_id: The ID of the agent to check\n    db: Database session\n\nReturns:\n    Dict with health status\n\nRaises:\n    HTTPException: If agent not found or is inactive",
        "operationId": "check_agent_health_api_agents__agent_id__health_post",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Agent Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Check Agent Health Api Agents  Agent Id  Health Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "tags": [
          "Health"
        ],
        "summary": "Health Check",
        "operationId": "health_check_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AgentCreate": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "title": "Name",
            "description": "Name of the agent"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "Description of the agent's purpose and capabilities"
          },
          "api_endpoint": {
            "type": "string",
            "title": "Api Endpoint",
            "description": "API endpoint URL for the agent"
          },
          "domain": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "title": "Domain",
            "description": "Domain/category the agent specializes in"
          },
          "config": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Config",
            "description": "Configuration options for the agent"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "description": "Whether the agent is currently active",
            "default": true
          },
          "model_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Model Type",
            "description": "Type of model used by the agent"
          },
          "version": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^\\d+\\.\\d+\\.\\d+$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Version",
            "description": "Version of the agent",
            "default": "1.0.0"
          },
          "tags": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tags",
            "description": "Tags for categorizing the agent"
          },
          "integration_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/IntegrationType"
              },
              {
                "type": "null"
              }
            ],
            "description": "Type of integration for this agent",
            "default": "azure_openai"
          },
          "auth_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AuthType"
              },
              {
                "type": "null"
              }
            ],
            "description": "Authentication method for this agent",
            "default": "api_key"
          },
          "auth_credentials": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Auth Credentials",
            "description": "Credentials for authentication (stored securely)"
          },
          "request_template": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Request Template",
            "description": "Template for request payload"
          },
          "response_format": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Response Format",
            "description": "Expected response format"
          },
          "retry_config": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Retry Config",
            "description": "Configuration for retry behavior"
          },
          "content_filter_config": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Content Filter Config",
            "description": "Configuration for content filtering"
          }
        },
        "type": "object",
        "required": [
          "name",
          "api_endpoint",
          "domain"
        ],
        "title": "AgentCreate",
        "description": "Schema for creating a new Agent."
      },
      "AgentResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "api_endpoint": {
            "type": "string",
            "title": "Api Endpoint"
          },
          "domain": {
            "type": "string",
            "title": "Domain"
          },
          "config": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Config"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "default": true
          },
          "model_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Model Type"
          },
          "version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Version",
            "default": "1.0.0"
          },
          "tags": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tags"
          },
          "integration_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/IntegrationType"
              },
              {
                "type": "null"
              }
            ],
            "default": "azure_openai"
          },
          "auth_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AuthType"
              },
              {
                "type": "null"
              }
            ],
            "default": "api_key"
          },
          "auth_credentials": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Auth Credentials"
          },
          "request_template": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Request Template"
          },
          "response_format": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Response Format"
          },
          "retry_config": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Retry Config"
          },
          "content_filter_config": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Content Filter Config"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "api_endpoint",
          "domain",
          "created_at",
          "updated_at"
        ],
        "title": "AgentResponse",
        "description": "Schema for Agent response."
      },
      "AgentUpdate": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 255,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "api_endpoint": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Api Endpoint"
          },
          "domain": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Domain"
          },
          "config": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Config"
          },
          "is_active": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Active"
          },
          "model_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Model Type"
          },
          "version": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^\\d+\\.\\d+\\.\\d+$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Version"
          },
          "tags": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tags"
          },
          "integration_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/IntegrationType"
              },
              {
                "type": "null"
              }
            ]
          },
          "auth_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AuthType"
              },
              {
                "type": "null"
              }
            ]
          },
          "auth_credentials": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Auth Credentials"
          },
          "request_template": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Request Template"
          },
          "response_format": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Response Format"
          },
          "retry_config": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Retry Config"
          },
          "content_filter_config": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Content Filter Config"
          }
        },
        "type": "object",
        "title": "AgentUpdate",
        "description": "Schema for updating an Agent."
      },
      "AuthStatusResponse": {
        "properties": {
          "authenticated": {
            "type": "boolean",
            "title": "Authenticated"
          },
          "user": {
            "additionalProperties": true,
            "type": "object",
            "title": "User"
          }
        },
        "type": "object",
        "required": [
          "authenticated"
        ],
        "title": "AuthStatusResponse",
        "description": "Schema for authentication status response."
      },
      "AuthType": {
        "type": "string",
        "enum": [
          "api_key",
          "bearer_token",
          "none"
        ],
        "title": "AuthType",
        "description": "Authentication types for agents."
      },
      "Body_create_dataset_api_datasets__post": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "type": {
            "$ref": "#/components/schemas/DatasetType"
          },
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File"
          },
          "is_public": {
            "type": "boolean",
            "title": "Is Public",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "name",
          "type",
          "file"
        ],
        "title": "Body_create_dataset_api_datasets__post"
      },
      "Body_generate_report_api_reports__report_id__generate_post": {
        "properties": {
          "force_regenerate": {
            "type": "boolean",
            "title": "Force Regenerate",
            "default": false
          }
        },
        "type": "object",
        "title": "Body_generate_report_api_reports__report_id__generate_post"
      },
      "Body_search_evaluations_api_evaluations_search_post": {
        "properties": {
          "query": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Query",
            "description": "Search query for name or description"
          },
          "filters": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filters",
            "description": "Additional filters"
          },
          "skip": {
            "type": "integer",
            "minimum": 0,
            "title": "Skip",
            "description": "Number of records to skip",
            "default": 0
          },
          "limit": {
            "type": "integer",
            "maximum": 1000,
            "minimum": 1,
            "title": "Limit",
            "description": "Maximum number of records to return",
            "default": 100
          },
          "sort_by": {
            "type": "string",
            "title": "Sort By",
            "description": "Field to sort by",
            "default": "created_at"
          },
          "sort_dir": {
            "type": "string",
            "title": "Sort Dir",
            "description": "Sort direction (asc or desc)",
            "default": "desc"
          }
        },
        "type": "object",
        "title": "Body_search_evaluations_api_evaluations_search_post"
      },
      "Body_test_mcp_agent_api_agents__agent_id__test_mcp_post": {
        "properties": {
          "test_message": {
            "type": "string",
            "title": "Test Message",
            "description": "Message to test with"
          }
        },
        "type": "object",
        "required": [
          "test_message"
        ],
        "title": "Body_test_mcp_agent_api_agents__agent_id__test_mcp_post"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "IntegrationType": {
        "type": "string",
        "enum": [
          "azure_openai",
          "mcp",
          "direct_api",
          "custom"
        ],
        "title": "IntegrationType",
        "description": "Integration types for agents."
      },
      "UserResponse": {
        "properties": {
          "sub": {
            "type": "string",
            "title": "Sub"
          },
          "username": {
            "type": "string",
            "title": "Username"
          },
          "email": {
            "type": "string",
            "title": "Email"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "roles": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Roles"
          }
        },
        "type": "object",
        "required": [
          "sub",
          "username",
          "email",
          "name",
          "roles"
        ],
        "title": "UserResponse",
        "description": "Schema for user response."
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "Enter your JWT token in the format: **Bearer &lt;token&gt;**"
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ]
}